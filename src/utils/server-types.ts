/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/api/clear_db": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Clear the database. For debug purposes only. */
        delete: operations["clear_db"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Server configuration */
        get: operations["server_configuration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update server configuration */
        patch: operations["update_server_configuration"];
        trace?: never;
    };
    "/api/configuration/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Server capabalities */
        get: operations["server_capabilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configuration/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get providers order */
        get: operations["get_providers_order"];
        /** Update providers order */
        put: operations["order_providers"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configuration/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset server configuration to its defaults */
        post: operations["reset_server_configuration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/episode/{id}/poster": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get episode poster */
        get: operations["episode_poster"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/external_ids/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List external ids for desired content */
        get: operations["external_ids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/external_to_local/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Map external to local id */
        get: operations["external_to_local_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file_browser/browse/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Browse internals of the given directory */
        get: operations["browse_directory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file_browser/parent/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get parent directory. Returns same directory if parent is not found */
        get: operations["parent_directory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file_browser/root_dirs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root and other related directories/drives */
        get: operations["root_dirs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/fix_metadata/{content_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fix metadata match */
        post: operations["fix_metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all watch history of the default user. Limit defaults to 50 if not specified */
        get: operations["all_history"];
        put?: never;
        post?: never;
        /** Delete all history for default user */
        delete: operations["clear_history"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/history/suggest/movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Suggest to continue watching up to 3 movies based on history */
        get: operations["suggest_movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/history/suggest/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Suggest to continue watching up to 3 shows based on history */
        get: operations["suggest_shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/history/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get history for specific video */
        get: operations["video_history"];
        /** Update history */
        put: operations["update_history"];
        post?: never;
        /** Delete history entry */
        delete: operations["remove_history_item"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/local_episode/by_video": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get local episode metadata by video's id */
        get: operations["local_episode_by_video_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/local_episode/{episode_id}/watch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Watch episode video */
        get: operations["watch_episode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/local_episode/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Local episode metadata by local episode id */
        get: operations["local_episode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/local_movie/by_video": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get local movie metadata by video's id */
        get: operations["local_movie_by_video_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/local_movie/{movie_id}/watch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Watch movie video */
        get: operations["watch_movie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/local_movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** All local movies */
        get: operations["all_local_movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/local_shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** All local shows */
        get: operations["all_local_shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Latest log */
        get: operations["latest_log"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock_progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create fake task and progress. For debug purposes only */
        post: operations["mock_progress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/movie/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get movie by id and provider */
        get: operations["get_movie"];
        /** Update movie metadata */
        put: operations["alter_movie_metadata"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/movie/{id}/backdrop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get movie backdrop image */
        get: operations["movie_backdrop"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/movie/{id}/poster": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get movie poster */
        get: operations["movie_poster"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/movie/{movie_id}/fix_metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fix movie metadata match */
        post: operations["fix_movie_metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/movie/{movie_id}/reset_metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset movie metadata */
        post: operations["reset_movie_metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reset_metadata/{content_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset content's metadata */
        post: operations["reset_metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/scan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Perform full library refresh */
        post: operations["reconciliate_lib"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for content. Allows to search for all types of content at once */
        get: operations["search_content"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/trending_movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get trending movies */
        get: operations["get_trending_movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/trending_shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get trending shows */
        get: operations["get_trending_shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/season/{id}/poster": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get season poster */
        get: operations["season_poster"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get show by id and provider */
        get: operations["get_show"];
        /** Update show metadata */
        put: operations["alter_show_metadata"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show/{id}/backdrop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get show backdrop image */
        get: operations["show_backdrop"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show/{id}/poster": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get show poster */
        get: operations["show_poster"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show/{id}/{season}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get season metadata */
        get: operations["get_season"];
        /** Update season metadata */
        put: operations["alter_season_metadata"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show/{id}/{season}/{episode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get episode metadata */
        get: operations["get_episode"];
        /** Update episode metadata */
        put: operations["alter_episode_metadata"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show/{show_id}/fix_metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fix show metadata match */
        post: operations["fix_show_metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show/{show_id}/reset_metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset show metadata */
        post: operations["reset_show_metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show/{show_id}/{season}/detect_intros": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Detect intros for given season */
        post: operations["detect_intros"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all running tasks */
        get: operations["get_tasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** SSE stream of current tasks progress */
        get: operations["progress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Cancel task with provided id */
        delete: operations["cancel_task"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrent/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all torrents */
        get: operations["all_torrents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrent/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Download torrent */
        post: operations["download_torrent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrent/parse_torrent_file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Parse .torrent file */
        post: operations["parse_torrent_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrent/resolve_magnet_link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Resolve magnet link */
        get: operations["resolve_magnet_link"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrent/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for torrent */
        get: operations["search_torrent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transcode/{id}/manifest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** M3U8 manifest of live transcode task */
        get: operations["transcode_stream_manifest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transcode/{id}/segment/{segment}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve transcoded segment */
        get: operations["transcoded_segment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all videos that have transcoded variants */
        get: operations["get_all_variants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/by_content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get video by content local id */
        get: operations["contents_video"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get video by id */
        get: operations["get_video_by_id"];
        put?: never;
        post?: never;
        /** Remove video from library. WARN: It will actually delete video file */
        delete: operations["remove_video"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/{id}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update/Insert video history */
        put: operations["update_video_history"];
        post?: never;
        /** Delete video history entry */
        delete: operations["remove_video_history"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/{id}/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get metadata related to the video */
        get: operations["video_content_metadata"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/{id}/previews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start previews generation job on video */
        post: operations["generate_previews"];
        /** Delete previews on video */
        delete: operations["delete_previews"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/{id}/previews/{number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get preview by video id */
        get: operations["previews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/{id}/pull_subtitle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Pull subtitle from video file */
        get: operations["pull_video_subtitle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/{id}/stream_transcode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start transcoded stream */
        post: operations["create_transcode_stream"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/{id}/transcode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start transcode video job */
        post: operations["transcode_video"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/{id}/variant/{variant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove variant from the library. WARN: It will actually delete video file */
        delete: operations["remove_variant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/video/{id}/watch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Video stream */
        get: operations["watch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        AppError: {
            message: string;
        };
        /** @enum {string} */
        AppErrorKind: "InternalError" | "NotFound" | "Duplicate" | "BadRequest";
        AppResources: {
            app_version: string;
            base_path: string;
            binary_path?: string | null;
            cache_path: string;
            database_path: string;
            log_path: string;
            os: string;
            os_version: string;
            resources_path: string;
            start_time: string;
            temp_path: string;
        };
        AudioCodec: "aac" | "ac3" | {
            other: string;
        };
        BrowseDirectory: {
            directories: components["schemas"]["BrowseFile"][];
            files: components["schemas"]["BrowseFile"][];
            size: number;
        };
        BrowseFile: {
            key: string;
            path: string;
            title: string;
        };
        BrowseRootDirs: {
            disks: components["schemas"]["BrowseFile"][];
            home?: null | components["schemas"]["BrowseFile"];
            root: components["schemas"]["BrowseFile"];
            videos?: null | components["schemas"]["BrowseFile"];
        };
        Capabilities: {
            chromaprint_enabled: boolean;
            codecs: components["schemas"]["Codec"][];
            ffmpeg_version: string;
        };
        Codec: {
            codec_type: components["schemas"]["CodecType"];
            decode_supported: boolean;
            encode_supported: boolean;
            long_name: string;
            name: string;
        };
        /** @enum {string} */
        CodecType: "audio" | "video" | "subtitle" | "data" | "attachment";
        ConfigSchema: ({
            /** Format: int32 */
            cli_value: number;
            /** Format: int32 */
            config_value: number;
            /** Format: int32 */
            default_value: number;
            /** Format: int32 */
            env_value: number;
            /** @enum {string} */
            key: "port";
            require_restart: boolean;
        } | {
            cli_value: string[];
            config_value: string[];
            default_value: string[];
            env_value: string[];
            /** @enum {string} */
            key: "show_folders";
            require_restart: boolean;
        } | {
            cli_value: string[];
            config_value: string[];
            default_value: string[];
            env_value: string[];
            /** @enum {string} */
            key: "movie_folders";
            require_restart: boolean;
        } | {
            cli_value: string | null;
            config_value: string | null;
            default_value: string | null;
            env_value: string | null;
            /** @enum {string} */
            key: "tmdb_key";
            require_restart: boolean;
        } | {
            cli_value: string | null;
            config_value: string | null;
            default_value: string | null;
            env_value: string | null;
            /** @enum {string} */
            key: "tvdb_key";
            require_restart: boolean;
        } | {
            cli_value: string;
            config_value: string;
            default_value: string;
            env_value: string;
            /** @enum {string} */
            key: "ffmpeg_path";
            require_restart: boolean;
        } | {
            cli_value: string;
            config_value: string;
            default_value: string;
            env_value: string;
            /** @enum {string} */
            key: "ffprobe_path";
            require_restart: boolean;
        } | {
            cli_value: boolean;
            config_value: boolean;
            default_value: boolean;
            env_value: boolean;
            /** @enum {string} */
            key: "hw_accel";
            require_restart: boolean;
        } | {
            /** @description Minimal intro duration from seconds */
            cli_value: number;
            /** @description Minimal intro duration from seconds */
            config_value: number;
            /** @description Minimal intro duration from seconds */
            default_value: number;
            /** @description Minimal intro duration from seconds */
            env_value: number;
            /** @enum {string} */
            key: "intro_min_duration";
            require_restart: boolean;
        } | {
            /** @description Path to FFmpeg build that supports chromparint audio fingerprinting */
            cli_value: string;
            /** @description Path to FFmpeg build that supports chromparint audio fingerprinting */
            config_value: string;
            /** @description Path to FFmpeg build that supports chromparint audio fingerprinting */
            default_value: string;
            /** @description Path to FFmpeg build that supports chromparint audio fingerprinting */
            env_value: string;
            /** @enum {string} */
            key: "intro_detection_ffmpeg_build";
            require_restart: boolean;
        } | {
            /** @description Path to Web UI dist directory */
            cli_value: string;
            /** @description Path to Web UI dist directory */
            config_value: string;
            /** @description Path to Web UI dist directory */
            default_value: string;
            /** @description Path to Web UI dist directory */
            env_value: string;
            /** @enum {string} */
            key: "web_ui_path";
            require_restart: boolean;
        } | {
            /** @description Enabled upnp */
            cli_value: boolean;
            /** @description Enabled upnp */
            config_value: boolean;
            /** @description Enabled upnp */
            default_value: boolean;
            /** @description Enabled upnp */
            env_value: boolean;
            /** @enum {string} */
            key: "upnp_enabled";
            require_restart: boolean;
        } | {
            /**
             * Format: int32
             * @description Ssdp packet ttl
             */
            cli_value: number;
            /**
             * Format: int32
             * @description Ssdp packet ttl
             */
            config_value: number;
            /**
             * Format: int32
             * @description Ssdp packet ttl
             */
            default_value: number;
            /**
             * Format: int32
             * @description Ssdp packet ttl
             */
            env_value: number;
            /** @enum {string} */
            key: "upnp_ttl";
            require_restart: boolean;
        } | {
            /** @description Metadata language */
            cli_value: components["schemas"]["Language"];
            /** @description Metadata language */
            config_value: components["schemas"]["Language"];
            /** @description Metadata language */
            default_value: components["schemas"]["Language"];
            /** @description Metadata language */
            env_value: components["schemas"]["Language"];
            /** @enum {string} */
            key: "metadata_language";
            require_restart: boolean;
        })[];
        ConfigurationApplyError: {
            key: string;
            message: string;
        };
        ConfigurationApplyResult: {
            errors: components["schemas"]["ConfigurationApplyError"][];
            require_restart: boolean;
        };
        /** @enum {string} */
        ContentType: "movie" | "show";
        CursoredResponse_DbHistory: {
            cursor?: string | null;
            data: {
                /** Format: int64 */
                id: number;
                is_finished: boolean;
                /** Format: int64 */
                time: number;
                /** Format: date-time */
                update_time: string;
                /** Format: int64 */
                video_id: number;
            }[];
        };
        DbExternalId: {
            /** Format: int64 */
            episode_id?: number | null;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            is_prime: number;
            metadata_id: string;
            metadata_provider: string;
            /** Format: int64 */
            movie_id?: number | null;
            /** Format: int64 */
            season_id?: number | null;
            /** Format: int64 */
            show_id?: number | null;
        };
        DbHistory: {
            /** Format: int64 */
            id: number;
            is_finished: boolean;
            /** Format: int64 */
            time: number;
            /** Format: date-time */
            update_time: string;
            /** Format: int64 */
            video_id: number;
        };
        DetailedAudioTrack: {
            /** Format: int32 */
            channels: number;
            codec: components["schemas"]["AudioCodec"];
            is_default: boolean;
            profile?: string | null;
            sample_rate: string;
        };
        DetailedSubtitleTrack: {
            codec: components["schemas"]["SubtitlesCodec"];
            is_default: boolean;
            language?: string | null;
        };
        DetailedVariant: {
            audio_tracks: components["schemas"]["DetailedAudioTrack"][];
            duration: components["schemas"]["SerdeDuration"];
            id: string;
            path: string;
            /** Format: int64 */
            size: number;
            video_tracks: components["schemas"]["DetailedVideoTrack"][];
        };
        DetailedVideo: {
            audio_tracks: components["schemas"]["DetailedAudioTrack"][];
            duration: components["schemas"]["SerdeDuration"];
            history?: null | components["schemas"]["DbHistory"];
            /** Format: int64 */
            id: number;
            intro?: null | components["schemas"]["Intro"];
            path: string;
            previews_count: number;
            scan_date: string;
            /** Format: int64 */
            size: number;
            subtitle_tracks: components["schemas"]["DetailedSubtitleTrack"][];
            variants: components["schemas"]["DetailedVariant"][];
            video_tracks: components["schemas"]["DetailedVideoTrack"][];
        };
        DetailedVideoTrack: {
            bitrate: number;
            codec: components["schemas"]["VideoCodec"];
            /** Format: double */
            framerate: number;
            is_default: boolean;
            /** Format: int32 */
            level: number;
            profile: string;
            resolution: components["schemas"]["Resolution"];
        };
        DownloadContentHint: {
            content_type: components["schemas"]["ContentType"];
            metadata_id: string;
            metadata_provider: components["schemas"]["MetadataProvider"];
        };
        EpisodeMetadata: {
            metadata_id: string;
            metadata_provider: components["schemas"]["MetadataProvider"];
            number: number;
            plot?: string | null;
            poster?: null | components["schemas"]["MetadataImage"];
            release_date?: string | null;
            runtime?: null | components["schemas"]["SerdeDuration"];
            season_number: number;
            title: string;
        };
        ExternalIdMetadata: {
            id: string;
            provider: components["schemas"]["MetadataProvider"];
        };
        Intro: {
            /** Format: int64 */
            end_sec: number;
            /** Format: int64 */
            start_sec: number;
        };
        JsonTracingEvent: {
            fields: {
                [key: string]: unknown;
            };
            level: string;
            name: string;
            target: string;
            timestamp: string;
        };
        /** @enum {string} */
        Language: "en" | "es" | "de" | "fr" | "ru" | "ja";
        /** Format: uri */
        MetadataImage: string;
        /** @enum {string} */
        MetadataProvider: "local" | "tmdb" | "tvdb" | "imdb";
        MetadataSearchResult: {
            content_type: components["schemas"]["ContentType"];
            metadata_id: string;
            metadata_provider: components["schemas"]["MetadataProvider"];
            plot?: string | null;
            poster?: null | components["schemas"]["MetadataImage"];
            title: string;
        };
        MovieHistory: {
            history: components["schemas"]["DbHistory"];
            movie: components["schemas"]["MovieMetadata"];
        };
        MovieMetadata: {
            backdrop?: null | components["schemas"]["MetadataImage"];
            metadata_id: string;
            metadata_provider: components["schemas"]["MetadataProvider"];
            plot?: string | null;
            poster?: null | components["schemas"]["MetadataImage"];
            release_date?: string | null;
            runtime?: null | components["schemas"]["SerdeDuration"];
            title: string;
        };
        PendingTorrent: {
            info_hash: number[];
            torrent_info: components["schemas"]["TorrentInfo"];
        };
        ProgressChunk: {
            status: components["schemas"]["ProgressStatus"];
            /** Format: uuid */
            task_id: string;
        };
        ProgressSpeed: {
            bytes: number;
            /** @enum {string} */
            speed_type: "bytespersec";
        } | {
            /** Format: float */
            speed: number;
            /** @enum {string} */
            speed_type: "relativespeed";
        };
        ProgressStatus: {
            /** @enum {string} */
            progress_type: "start";
        } | {
            /** @enum {string} */
            progress_type: "finish";
        } | {
            /** Format: float */
            percent?: number | null;
            /** @enum {string} */
            progress_type: "pending";
            speed?: null | components["schemas"]["ProgressSpeed"];
        } | {
            /** @enum {string} */
            progress_type: "cancel";
        } | {
            /** @enum {string} */
            progress_type: "error";
        } | {
            /** @enum {string} */
            progress_type: "pause";
        };
        ProviderOrder: {
            order: string[];
            provider_type: components["schemas"]["ProviderType"];
        };
        /** @enum {string} */
        ProviderType: "discover" | "movie" | "show" | "torrent";
        Resolution: {
            height: number;
            width: number;
        };
        ResolvedTorrentFile: {
            enabled: boolean;
            /** Format: int64 */
            offset: number;
            path: string[];
            /** Format: int64 */
            size: number;
        };
        SeasonMetadata: {
            episodes: components["schemas"]["EpisodeMetadata"][];
            metadata_id: string;
            metadata_provider: components["schemas"]["MetadataProvider"];
            number: number;
            plot?: string | null;
            poster?: null | components["schemas"]["MetadataImage"];
            release_date?: string | null;
        };
        SerdeDuration: {
            /** Format: int32 */
            nanos: number;
            /** Format: int64 */
            secs: number;
        };
        ShowHistory: {
            episode: components["schemas"]["EpisodeMetadata"];
            history: components["schemas"]["DbHistory"];
            /** Format: int64 */
            show_id: number;
        };
        ShowMetadata: {
            backdrop?: null | components["schemas"]["MetadataImage"];
            episodes_amount?: number | null;
            metadata_id: string;
            metadata_provider: components["schemas"]["MetadataProvider"];
            plot?: string | null;
            poster?: null | components["schemas"]["MetadataImage"];
            release_date?: string | null;
            /** @description Array of available season numbers */
            seasons?: number[] | null;
            title: string;
        };
        ShowSuggestion: {
            episode: components["schemas"]["EpisodeMetadata"];
            history?: null | components["schemas"]["DbHistory"];
            /** Format: int64 */
            show_id: number;
        };
        SubtitlesCodec: null | string;
        Task: {
            cancelable: boolean;
            /** Format: date-time */
            created: string;
            /** Format: uuid */
            id: string;
            kind: components["schemas"]["TaskKind"];
        };
        TaskKind: (components["schemas"]["VideoTask"] & {
            /** @enum {string} */
            task_kind: "video";
        }) | (components["schemas"]["TorrentTask"] & {
            /** @enum {string} */
            task_kind: "torrent";
        }) | {
            /** @enum {string} */
            task_kind: "scan";
        };
        Torrent: {
            author?: string | null;
            /** Format: date-time */
            created: string;
            imdb_id: string;
            leechers: number;
            /** Format: uri */
            magnet: string;
            name: string;
            seeders: number;
            size: number;
        };
        TorrentContent: {
            show: components["schemas"]["TorrentShow"];
        } | {
            movie: components["schemas"]["TorrentMovie"][];
        };
        TorrentContents: {
            content?: null | components["schemas"]["TorrentContent"];
            files: components["schemas"]["ResolvedTorrentFile"][];
        };
        TorrentDownloadPayload: {
            content_hint?: null | components["schemas"]["DownloadContentHint"];
            enabled_files?: number[] | null;
            magnet_link: string;
            save_location?: string | null;
        };
        TorrentEpisode: {
            file_idx: number;
            metadata: components["schemas"]["EpisodeMetadata"];
        };
        TorrentInfo: {
            contents: components["schemas"]["TorrentContents"];
            name: string;
            /** Format: int32 */
            piece_length: number;
            pieces_amount: number;
            /** Format: int64 */
            total_size: number;
        };
        TorrentMovie: {
            file_idx: number;
            metadata: components["schemas"]["MovieMetadata"];
        };
        TorrentShow: {
            seasons: {
                [key: string]: components["schemas"]["TorrentEpisode"][];
            };
            show_metadata: components["schemas"]["ShowMetadata"];
        };
        TorrentTask: {
            content?: null | components["schemas"]["TorrentContent"];
            info_hash: number[];
        };
        TranscodePayload: {
            audio_codec?: null | components["schemas"]["AudioCodec"];
            audio_track?: number | null;
            resolution?: null | components["schemas"]["Resolution"];
            video_codec?: null | components["schemas"]["VideoCodec"];
        };
        UpdateHistoryPayload: {
            is_finished: boolean;
            /** Format: int64 */
            time: number;
        };
        VideoCodec: "hevc" | "h264" | {
            other: string;
        };
        VideoContentMetadata: {
            /** @enum {string} */
            content_type: "episode";
            episode: components["schemas"]["EpisodeMetadata"];
            show: components["schemas"]["ShowMetadata"];
        } | {
            /** @enum {string} */
            content_type: "movie";
            movie: components["schemas"]["MovieMetadata"];
        };
        VideoTask: {
            kind: components["schemas"]["VideoTaskKind"];
            /** Format: int64 */
            video_id: number;
        };
        /** @enum {string} */
        VideoTaskKind: "transcode" | "livetranscode" | "previews" | "subtitles";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    clear_db: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    server_configuration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigSchema"];
                };
            };
        };
    };
    update_server_configuration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Key/value configuration pairs */
        requestBody: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigurationApplyResult"];
                };
            };
        };
    };
    server_capabilities: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Capabilities"];
                };
            };
        };
    };
    get_providers_order: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ordering of providers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderOrder"][];
                };
            };
        };
    };
    order_providers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProviderOrder"];
            };
        };
        responses: {
            /** @description Updated ordering of providers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderOrder"];
                };
            };
        };
    };
    reset_server_configuration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    episode_poster: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Episode id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/*": unknown;
                };
            };
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    external_ids: {
        parameters: {
            query: {
                provider: "local" | "tmdb" | "tvdb" | "imdb";
                content_type: "movie" | "show";
            };
            header?: never;
            path: {
                /** @description External id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description External ids */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalIdMetadata"][];
                };
            };
        };
    };
    external_to_local_id: {
        parameters: {
            query: {
                provider: "local" | "tmdb" | "tvdb" | "imdb";
            };
            header?: never;
            path: {
                /** @description External id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DbExternalId"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    browse_directory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Key of directory to explore. It is base64 encoded path in current implementation */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BrowseDirectory"];
                };
            };
        };
    };
    parent_directory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Get parent directory */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BrowseFile"];
                };
            };
        };
    };
    root_dirs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BrowseRootDirs"];
                };
            };
        };
    };
    fix_metadata: {
        parameters: {
            query: {
                provider: "local" | "tmdb" | "tvdb" | "imdb";
                id: string;
                content_type: "movie" | "show";
            };
            header?: never;
            path: {
                /** @description Id of the content that needs to be fixed */
                content_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    all_history: {
        parameters: {
            query?: {
                take?: number | null;
                cursor?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All history */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CursoredResponse_DbHistory"];
                };
            };
        };
    };
    clear_history: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    suggest_movies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Suggested movies */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieHistory"][];
                };
            };
        };
    };
    suggest_shows: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Suggested shows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShowSuggestion"][];
                };
            };
        };
    };
    video_history: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description History of desired video */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DbHistory"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_history: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description History id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateHistoryPayload"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    remove_history_item: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description History id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    local_episode_by_video_id: {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Local episode */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EpisodeMetadata"];
                };
            };
        };
    };
    watch_episode: {
        parameters: {
            query?: {
                variant?: string | null;
            };
            header?: never;
            path: {
                /** @description episode id */
                episode_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Video progressive download stream */
            206: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "video/x-matroska": unknown;
                };
            };
            /** @description Video is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    local_episode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Local id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Local episode */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EpisodeMetadata"];
                };
            };
        };
    };
    local_movie_by_video_id: {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Local movie */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieMetadata"];
                };
            };
        };
    };
    watch_movie: {
        parameters: {
            query?: {
                variant?: string | null;
            };
            header?: never;
            path: {
                /** @description movie id */
                movie_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Movie video progressive download stream */
            206: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "video/x-matroska": unknown;
                };
            };
            /** @description Video is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    all_local_movies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All local movies */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieMetadata"][];
                };
            };
        };
    };
    all_local_shows: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All local shows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShowMetadata"][];
                };
            };
        };
    };
    latest_log: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JsonTracingEvent"][];
                };
            };
        };
    };
    mock_progress: {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_movie: {
        parameters: {
            query: {
                provider: "local" | "tmdb" | "tvdb" | "imdb";
            };
            header?: never;
            path: {
                /** @description Movie id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Requested movie */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieMetadata"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    alter_movie_metadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MovieMetadata"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    movie_backdrop: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/*": unknown;
                };
            };
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    movie_poster: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/*": unknown;
                };
            };
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    fix_movie_metadata: {
        parameters: {
            query: {
                provider: "local" | "tmdb" | "tvdb" | "imdb";
                id: string;
            };
            header?: never;
            path: {
                /** @description Id of the movie that needs to be fixed */
                movie_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reset_movie_metadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the movie that needs to be fixed */
                movie_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reset_metadata: {
        parameters: {
            query: {
                content_type: "movie" | "show";
            };
            header?: never;
            path: {
                /** @description Id of the content that needs to be fixed */
                content_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reconciliate_lib: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    search_content: {
        parameters: {
            query: {
                search: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Content search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataSearchResult"][];
                };
            };
        };
    };
    get_trending_movies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of trending shows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieMetadata"][];
                };
            };
        };
    };
    get_trending_shows: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of trending movies */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShowMetadata"][];
                };
            };
        };
    };
    season_poster: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Season id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/*": unknown;
                };
            };
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    get_show: {
        parameters: {
            query: {
                provider: "local" | "tmdb" | "tvdb" | "imdb";
            };
            header?: never;
            path: {
                /** @description Show id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Requested show */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShowMetadata"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    alter_show_metadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShowMetadata"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    show_backdrop: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/*": unknown;
                };
            };
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Image not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    show_poster: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/*": unknown;
                };
            };
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    get_season: {
        parameters: {
            query: {
                provider: "local" | "tmdb" | "tvdb" | "imdb";
            };
            header?: never;
            path: {
                /** @description Show id */
                id: string;
                /** @description Season number */
                season: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Desired season metadata */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SeasonMetadata"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    alter_season_metadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Show id */
                id: number;
                /** @description Season number */
                season: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SeasonMetadata"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_episode: {
        parameters: {
            query: {
                provider: "local" | "tmdb" | "tvdb" | "imdb";
            };
            header?: never;
            path: {
                /** @description Show id */
                id: string;
                /** @description Season number */
                season: number;
                /** @description Episode number */
                episode: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Desired episode metadata */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EpisodeMetadata"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    alter_episode_metadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Show id */
                id: number;
                /** @description Season number */
                season: number;
                /** @description Episode number */
                episode: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EpisodeMetadata"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    fix_show_metadata: {
        parameters: {
            query: {
                provider: "local" | "tmdb" | "tvdb" | "imdb";
                id: string;
            };
            header?: never;
            path: {
                /** @description Id of the show that needs to be fixed */
                show_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reset_show_metadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the show that needs to be fixed */
                show_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    detect_intros: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Show id */
                show_id: number;
                /** @description Season number */
                season: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Show or season are not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_tasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Task can't be canceled or it is not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    progress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": number[];
                };
            };
        };
    };
    cancel_task: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task can't be canceled or it is not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    all_torrents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentInfo"][];
                };
            };
        };
    };
    download_torrent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TorrentDownloadPayload"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    parse_torrent_file: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                content_type: null | ("movie" | "show");
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentInfo"];
                };
            };
            /** @description Failed to parse torrent file */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resolve_magnet_link: {
        parameters: {
            query: {
                magnet_link: string;
                /** @description Content type */
                content_type?: null | components["schemas"]["ContentType"];
                /** @description Metadata provider */
                metadata_provider?: null | components["schemas"]["MetadataProvider"];
                /** @description Metadata id */
                metadata_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentInfo"];
                };
            };
            /** @description Failed to parse magnet link */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_torrent: {
        parameters: {
            query: {
                search: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Torrent search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Torrent"][];
                };
            };
        };
    };
    transcode_stream_manifest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Task uuid is incorrect */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transcoded_segment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transcode job */
                id: string;
                /** @description Desired segment */
                segment: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Transcode job is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Worker is not available */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_variants: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailedVideo"][];
                };
            };
        };
    };
    contents_video: {
        parameters: {
            query: {
                content_type: "movie" | "show";
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Desired video */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailedVideo"];
                };
            };
            /** @description Video is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_video_by_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Requested video */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailedVideo"];
                };
            };
        };
    };
    remove_video: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_video_history: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateHistoryPayload"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description History is created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    remove_video_history: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    video_content_metadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Metadata related to the video */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoContentMetadata"];
                };
            };
        };
    };
    generate_previews: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_previews: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    previews: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description video id */
                id: number;
                /** @description preview number */
                number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Binary image */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": number[];
                };
            };
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Preiew is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    pull_video_subtitle: {
        parameters: {
            query: {
                number: number;
            };
            header?: never;
            path: {
                /** @description video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subtitle */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Video is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
    create_transcode_stream: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
            /** @description Video is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transcode_video: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TranscodePayload"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    remove_variant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id */
                id: number;
                /** @description Variant id */
                variant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    watch: {
        parameters: {
            query?: {
                variant?: string | null;
            };
            header?: never;
            path: {
                /** @description video id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Video progressive download stream */
            206: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "video/x-matroska": number[];
                };
            };
            /** @description Video is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppError"];
                };
            };
        };
    };
}
